#!/usr/bin/env node
/* eslint-env node */
const chalk = require('chalk');

const { promptForInstance, promptForProject } = require('../lib/prompt');
const { printer } = require('../lib/print');
const { checkStateGenerator } = require('../lib/net');
const { notify } = require('../lib/notify');

const log = require('debug')('jenkins:main');
let state;
const poll = async (updater) => {
  log('start polling');
  const status = printer();
  const run = async (initial) => {
    const job = await updater();
    log('got job', job);
    state = {
      url: job.url,
      name: job.fullDisplayName,
      result: job.result,
      building: job.building,
      estimatedDuration: job.estimatedDuration,
      state: job.building ? 'building' : 'finished',
      timestamp: job.timestamp,
      duration: job.duration
    };
    log('got state', state);
    if(state.building) {
      log('will reschedule for 15s');
      setTimeout(() => {
        run();
      }, 15000)
    } else {
      if(!initial) {
        notify(state);
      }
    }
  };
  const print = () => {
    status(state);
    if(!state || state.building) {
      log('reschedule printing for 1s');
      setTimeout(() => {
        print();
      }, 1000);
    }
  };

  await run(true);
  return print();
};

Promise.resolve().then(async () => {
  log('starting');
  const project = await promptForInstance();
  const credentials = await promptForProject();
  const updater = checkStateGenerator(project, credentials);
  return poll(updater);
}).catch(err => {
  console.log(chalk`\n{red.bold ${err.message}}`);
  process.exit(1);
});
